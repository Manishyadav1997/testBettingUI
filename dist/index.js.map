{
  "version": 3,
  "sources": ["../server/index.ts", "../server/routes.ts", "../server/vite.ts"],
  "sourcesContent": ["import express, { type Request, Response, NextFunction } from \"express\";\nimport path from \"path\";\nimport { fileURLToPath } from 'url';\nimport { createServer } from 'http';\nimport { registerRoutes } from \"./routes\";\nimport { setupVite } from \"./vite\";\nimport { WebSocketServer } from 'ws';\nimport fs from 'fs/promises';\nimport { nanoid } from 'nanoid';\n\nconst __filename = fileURLToPath(import.meta.url);\nconst __dirname = path.dirname(__filename);\n\n// Simple logger\nfunction log(message: string, context = 'express') {\n  const timestamp = new Date().toLocaleTimeString('en-US', {\n    hour: 'numeric',\n    minute: '2-digit',\n    second: '2-digit',\n    hour12: true\n  });\n  console.log(`${timestamp} [${context}] ${message}`);\n}\n\nconst app = express();\napp.use(express.json());\napp.use(express.urlencoded({ extended: false }));\n\napp.use((req, res, next) => {\n  const start = Date.now();\n  const path = req.path;\n  let capturedJsonResponse: Record<string, any> | undefined = undefined;\n\n  const originalResJson = res.json;\n  res.json = function (bodyJson, ...args) {\n    capturedJsonResponse = bodyJson;\n    return originalResJson.apply(res, [bodyJson, ...args]);\n  };\n\n  res.on(\"finish\", () => {\n    const duration = Date.now() - start;\n    if (path.startsWith(\"/api\")) {\n      let logLine = `${req.method} ${path} ${res.statusCode} in ${duration}ms`;\n      if (capturedJsonResponse) {\n        logLine += ` :: ${JSON.stringify(capturedJsonResponse)}`;\n      }\n\n      if (logLine.length > 80) {\n        logLine = logLine.slice(0, 79) + \"\u2026\";\n      }\n\n      log(logLine);\n    }\n  });\n\n  next();\n});\n\n(async () => {\n  const server = await registerRoutes(app);\n\n  app.use((err: any, _req: Request, res: Response, _next: NextFunction) => {\n    const status = err.status || err.statusCode || 500;\n    const message = err.message || \"Internal Server Error\";\n\n    res.status(status).json({ message });\n    throw err;\n  });\n\n  // Handle static files and client-side routing\n  if (app.get(\"env\") === \"development\") {\n    await setupVite(app, server);\n  } else {\n    // In production, serve static files from the dist directory\n    const distPath = path.resolve(process.cwd(), 'dist');\n    log(`Serving static files from: ${distPath}`);\n    \n    try {\n      // Log the files in the dist directory for debugging\n      const files = await fs.readdir(distPath);\n      log(`Files in dist directory: ${files.join(', ')}`);\n      \n      // Serve static files\n      app.use(express.static(distPath, {\n        index: 'index.html',\n        maxAge: '1y',\n        etag: true,\n        lastModified: true,\n        setHeaders: (res, filePath) => {\n          if (filePath.endsWith('.html')) {\n            // Disable caching for HTML files\n            res.setHeader('Cache-Control', 'no-cache, no-store, must-revalidate');\n            res.setHeader('Pragma', 'no-cache');\n            res.setHeader('Expires', '0');\n          }\n        },\n      }));\n      \n      // Handle client-side routing - return index.html for all non-API routes\n      app.get('*', (req, res) => {\n        log(`Serving index.html for route: ${req.path}`);\n        res.sendFile(path.join(distPath, 'index.html'), (err) => {\n          if (err) {\n            log(`Error serving index.html: ${err.message}`, 'error');\n            res.status(500).send('Error loading the application');\n          }\n        });\n      });\n    } catch (error: unknown) {\n      const errorMessage = error instanceof Error ? error.message : 'Unknown error';\n      log(`Error setting up static file serving: ${errorMessage}`, 'error');\n      process.exit(1);\n    }\n  }\n\n  // Serve the app on port 3000 for development\n  const port = 3000;\n  server.listen(port, '127.0.0.1', () => {\n    log(`Server running at http://127.0.0.1:${port}`);\n  });\n})();\n", "import type { Express } from \"express\";\nimport { createServer, type Server } from \"http\";\nimport { WebSocketServer, WebSocket } from \"ws\";\nimport { storage } from \"./storage\";\n\nexport async function registerRoutes(app: Express): Promise<Server> {\n  const httpServer = createServer(app);\n\n  // WebSocket server for real-time updates\n  const wss = new WebSocketServer({ server: httpServer, path: '/ws' });\n\n  wss.on('connection', (ws: WebSocket) => {\n    console.log('Client connected to WebSocket');\n\n    // Send initial data\n    ws.send(JSON.stringify({\n      type: 'welcome',\n      message: 'Connected to BetPro real-time updates'\n    }));\n\n    // Mock real-time data updates\n    const intervals = [\n      // Cricket odds updates\n      setInterval(() => {\n        if (ws.readyState === WebSocket.OPEN) {\n          ws.send(JSON.stringify({\n            type: 'cricket_odds_update',\n            data: {\n              matchId: '1',\n              odds: {\n                team1Win: 1.85 + (Math.random() - 0.5) * 0.1,\n                team2Win: 2.10 + (Math.random() - 0.5) * 0.1,\n              }\n            }\n          }));\n        }\n      }, 3000),\n\n      // Aviator multiplier updates\n      setInterval(() => {\n        if (ws.readyState === WebSocket.OPEN) {\n          const multiplier = 1.0 + Math.random() * 10;\n          ws.send(JSON.stringify({\n            type: 'aviator_update',\n            data: {\n              multiplier: multiplier.toFixed(2),\n              crashed: multiplier > 8,\n            }\n          }));\n        }\n      }, 100),\n\n      // Color game countdown\n      setInterval(() => {\n        if (ws.readyState === WebSocket.OPEN) {\n          const countdown = Math.floor(Math.random() * 60);\n          ws.send(JSON.stringify({\n            type: 'color_game_update',\n            data: {\n              countdown,\n              round: 1235 + Math.floor(Date.now() / 60000),\n            }\n          }));\n        }\n      }, 1000),\n    ];\n\n    ws.on('message', (message) => {\n      try {\n        const data = JSON.parse(message.toString());\n        console.log('Received message:', data);\n        \n        // Handle different message types\n        switch (data.type) {\n          case 'place_bet':\n            // Mock bet placement\n            ws.send(JSON.stringify({\n              type: 'bet_placed',\n              data: {\n                betId: Date.now().toString(),\n                status: 'success',\n                message: 'Bet placed successfully'\n              }\n            }));\n            break;\n          case 'cash_out':\n            // Mock cash out\n            ws.send(JSON.stringify({\n              type: 'cash_out_success',\n              data: {\n                amount: data.amount,\n                multiplier: data.multiplier,\n              }\n            }));\n            break;\n        }\n      } catch (error) {\n        console.error('Error parsing WebSocket message:', error);\n      }\n    });\n\n    ws.on('close', () => {\n      console.log('Client disconnected from WebSocket');\n      intervals.forEach(interval => clearInterval(interval));\n    });\n\n    ws.on('error', (error) => {\n      console.error('WebSocket error:', error);\n      intervals.forEach(interval => clearInterval(interval));\n    });\n  });\n\n  // API Routes\n  app.get('/api/matches', async (req, res) => {\n    // Mock matches data\n    const matches = [\n      {\n        id: '1',\n        team1: 'Mumbai Indians',\n        team2: 'Chennai Super Kings',\n        status: 'live',\n        score: { team1Score: '178/4', team2Score: '0/0', overs: '18.4' },\n        odds: { team1Win: 1.85, team2Win: 2.10 },\n        startTime: new Date().toISOString(),\n      },\n      {\n        id: '2',\n        team1: 'Royal Challengers Bangalore',\n        team2: 'Delhi Capitals',\n        status: 'live',\n        score: { team1Score: '98/2', team2Score: '0/0', overs: '12.2' },\n        odds: { team1Win: 1.92, team2Win: 1.98 },\n        startTime: new Date().toISOString(),\n      },\n    ];\n    res.json(matches);\n  });\n\n  app.post('/api/bets', async (req, res) => {\n    try {\n      const { gameType, betType, amount, odds } = req.body;\n      \n      // Mock bet creation\n      const bet = {\n        id: Date.now().toString(),\n        gameType,\n        betType,\n        amount,\n        odds,\n        status: 'pending',\n        createdAt: new Date().toISOString(),\n      };\n      \n      res.json({ success: true, bet });\n    } catch (error) {\n      res.status(400).json({ error: 'Failed to place bet' });\n    }\n  });\n\n  app.get('/api/user/balance', async (req, res) => {\n    res.json({ balance: 12450.00 });\n  });\n\n  app.post('/api/user/deposit', async (req, res) => {\n    try {\n      const { amount } = req.body;\n      \n      // Mock deposit\n      res.json({ \n        success: true, \n        newBalance: 12450.00 + amount,\n        transactionId: Date.now().toString(),\n      });\n    } catch (error) {\n      res.status(400).json({ error: 'Deposit failed' });\n    }\n  });\n\n  app.get('/api/leaderboard', async (req, res) => {\n    const winners = [\n      { rank: 1, username: 'RajeshK***', game: 'Aviator', amount: 45670 },\n      { rank: 2, username: 'PriyaM***', game: 'Color Trading', amount: 23450 },\n      { rank: 3, username: 'ArunS***', game: 'Cricket', amount: 18230 },\n      { rank: 4, username: 'SnehaR***', game: 'Mini Games', amount: 15670 },\n      { rank: 5, username: 'VikasT***', game: 'Aviator', amount: 12890 },\n    ];\n    res.json(winners);\n  });\n\n  return httpServer;\n}\n", "import express, { type Express } from \"express\";\nimport fs from \"fs\";\nimport path from \"path\";\nimport { createServer as createViteServer, createLogger } from \"vite\";\nimport { type Server } from \"http\";\nimport viteConfig from \"../vite.config\";\nimport { nanoid } from \"nanoid\";\n\nconst viteLogger = createLogger();\n\nexport function log(message: string, source = \"express\") {\n  const formattedTime = new Date().toLocaleTimeString(\"en-US\", {\n    hour: \"numeric\",\n    minute: \"2-digit\",\n    second: \"2-digit\",\n    hour12: true,\n  });\n\n  console.log(`${formattedTime} [${source}] ${message}`);\n}\n\nexport async function setupVite(app: Express, server: Server) {\n  const vite = await createViteServer({\n    configFile: path.resolve(import.meta.dirname, '../vite.config.ts'),\n    server: {\n      middlewareMode: true,\n      hmr: { \n        server,\n        port: 24678,\n        clientPort: 24678,\n        protocol: 'ws',\n        host: 'localhost'\n      },\n    },\n    appType: 'custom',\n    customLogger: {\n      ...viteLogger,\n      error: (msg, options) => {\n        viteLogger.error(msg, options);\n        process.exit(1);\n      },\n    },\n  });\n\n  app.use(vite.middlewares);\n  app.use(\"*\", async (req, res, next) => {\n    const url = req.originalUrl;\n\n    try {\n      const clientTemplate = path.resolve(\n        import.meta.dirname,\n        \"..\",\n        \"client\",\n        \"index.html\",\n      );\n\n      // always reload the index.html file from disk incase it changes\n      let template = await fs.promises.readFile(clientTemplate, \"utf-8\");\n      template = template.replace(\n        `src=\"/src/main.tsx\"`,\n        `src=\"/src/main.tsx?v=${nanoid()}\"`,\n      );\n      const page = await vite.transformIndexHtml(url, template);\n      res.status(200).set({ \"Content-Type\": \"text/html\" }).end(page);\n    } catch (e) {\n      vite.ssrFixStacktrace(e as Error);\n      next(e);\n    }\n  });\n}\n\nexport function serveStatic(app: Express) {\n  const distPath = path.resolve(import.meta.dirname, \"public\");\n\n  if (!fs.existsSync(distPath)) {\n    throw new Error(\n      `Could not find the build directory: ${distPath}, make sure to build the client first`,\n    );\n  }\n\n  app.use(express.static(distPath));\n\n  // fall through to index.html if the file doesn't exist\n  app.use(\"*\", (_req, res) => {\n    res.sendFile(path.resolve(distPath, \"index.html\"));\n  });\n}\n"],
  "mappings": "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",
  "names": ["express", "path", "fileURLToPath", "createServer", "WebSocketServer", "WebSocket", "registerRoutes", "app", "httpServer", "ws", "intervals", "multiplier", "countdown", "message", "data", "error", "interval", "req", "res", "matches", "gameType", "betType", "amount", "odds", "bet", "winners", "express", "fs", "path", "createViteServer", "createLogger", "nanoid", "viteLogger", "setupVite", "app", "server", "vite", "createViteServer", "path", "viteLogger", "msg", "options", "req", "res", "next", "url", "clientTemplate", "template", "fs", "nanoid", "page", "e", "fs", "__filename", "fileURLToPath", "__dirname", "path", "log", "message", "context", "timestamp", "app", "express", "req", "res", "next", "start", "capturedJsonResponse", "originalResJson", "bodyJson", "args", "duration", "logLine", "server", "registerRoutes", "err", "_req", "_next", "status", "setupVite", "distPath", "files", "filePath", "error", "errorMessage", "port"]
}
