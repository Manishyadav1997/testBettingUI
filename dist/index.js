import l from"express";import g from"path";import{fileURLToPath as $}from"url";import{createServer as v}from"http";import{WebSocketServer as x,WebSocket as p}from"ws";async function f(n){let a=v(n);return new x({server:a,path:"/ws"}).on("connection",t=>{console.log("Client connected to WebSocket"),t.send(JSON.stringify({type:"welcome",message:"Connected to BetPro real-time updates"}));let r=[setInterval(()=>{t.readyState===p.OPEN&&t.send(JSON.stringify({type:"cricket_odds_update",data:{matchId:"1",odds:{team1Win:1.85+(Math.random()-.5)*.1,team2Win:2.1+(Math.random()-.5)*.1}}}))},3e3),setInterval(()=>{if(t.readyState===p.OPEN){let e=1+Math.random()*10;t.send(JSON.stringify({type:"aviator_update",data:{multiplier:e.toFixed(2),crashed:e>8}}))}},100),setInterval(()=>{if(t.readyState===p.OPEN){let e=Math.floor(Math.random()*60);t.send(JSON.stringify({type:"color_game_update",data:{countdown:e,round:1235+Math.floor(Date.now()/6e4)}}))}},1e3)];t.on("message",e=>{try{let o=JSON.parse(e.toString());switch(console.log("Received message:",o),o.type){case"place_bet":t.send(JSON.stringify({type:"bet_placed",data:{betId:Date.now().toString(),status:"success",message:"Bet placed successfully"}}));break;case"cash_out":t.send(JSON.stringify({type:"cash_out_success",data:{amount:o.amount,multiplier:o.multiplier}}));break}}catch(o){console.error("Error parsing WebSocket message:",o)}}),t.on("close",()=>{console.log("Client disconnected from WebSocket"),r.forEach(e=>clearInterval(e))}),t.on("error",e=>{console.error("WebSocket error:",e),r.forEach(o=>clearInterval(o))})}),n.get("/api/matches",async(t,r)=>{let e=[{id:"1",team1:"Mumbai Indians",team2:"Chennai Super Kings",status:"live",score:{team1Score:"178/4",team2Score:"0/0",overs:"18.4"},odds:{team1Win:1.85,team2Win:2.1},startTime:new Date().toISOString()},{id:"2",team1:"Royal Challengers Bangalore",team2:"Delhi Capitals",status:"live",score:{team1Score:"98/2",team2Score:"0/0",overs:"12.2"},odds:{team1Win:1.92,team2Win:1.98},startTime:new Date().toISOString()}];r.json(e)}),n.post("/api/bets",async(t,r)=>{try{let{gameType:e,betType:o,amount:i,odds:c}=t.body,u={id:Date.now().toString(),gameType:e,betType:o,amount:i,odds:c,status:"pending",createdAt:new Date().toISOString()};r.json({success:!0,bet:u})}catch{r.status(400).json({error:"Failed to place bet"})}}),n.get("/api/user/balance",async(t,r)=>{r.json({balance:12450})}),n.post("/api/user/deposit",async(t,r)=>{try{let{amount:e}=t.body;r.json({success:!0,newBalance:12450+e,transactionId:Date.now().toString()})}catch{r.status(400).json({error:"Deposit failed"})}}),n.get("/api/leaderboard",async(t,r)=>{let e=[{rank:1,username:"RajeshK***",game:"Aviator",amount:45670},{rank:2,username:"PriyaM***",game:"Color Trading",amount:23450},{rank:3,username:"ArunS***",game:"Cricket",amount:18230},{rank:4,username:"SnehaR***",game:"Mini Games",amount:15670},{rank:5,username:"VikasT***",game:"Aviator",amount:12890}];r.json(e)}),a}import R from"express";import b from"fs";import h from"path";import{createServer as w,createLogger as k}from"vite";import{nanoid as E}from"nanoid";var S=k();async function y(n,a){let s=await w({configFile:h.resolve(import.meta.dirname,"../vite.config.ts"),server:{middlewareMode:!0,hmr:{server:a,port:24678,clientPort:24678,protocol:"ws",host:"localhost"}},appType:"custom",customLogger:{...S,error:(t,r)=>{S.error(t,r),process.exit(1)}}});n.use(s.middlewares),n.use("*",async(t,r,e)=>{let o=t.originalUrl;try{let i=h.resolve(import.meta.dirname,"..","client","index.html"),c=await b.promises.readFile(i,"utf-8");c=c.replace('src="/src/main.tsx"',`src="/src/main.tsx?v=${E()}"`);let u=await s.transformIndexHtml(o,c);r.status(200).set({"Content-Type":"text/html"}).end(u)}catch(i){s.ssrFixStacktrace(i),e(i)}})}import _ from"fs/promises";var W=$(import.meta.url),V=g.dirname(W);function d(n,a="express"){let s=new Date().toLocaleTimeString("en-US",{hour:"numeric",minute:"2-digit",second:"2-digit",hour12:!0});console.log(`${s} [${a}] ${n}`)}var m=l();m.use(l.json());m.use(l.urlencoded({extended:!1}));m.use((n,a,s)=>{let t=Date.now(),r=n.path,e,o=a.json;a.json=function(i,...c){return e=i,o.apply(a,[i,...c])},a.on("finish",()=>{let i=Date.now()-t;if(r.startsWith("/api")){let c=`${n.method} ${r} ${a.statusCode} in ${i}ms`;e&&(c+=` :: ${JSON.stringify(e)}`),c.length>80&&(c=c.slice(0,79)+"\u2026"),d(c)}}),s()});(async()=>{let n=await f(m);if(m.use((s,t,r,e)=>{let o=s.status||s.statusCode||500,i=s.message||"Internal Server Error";throw r.status(o).json({message:i}),s}),m.get("env")==="development")await y(m,n);else{let s=g.resolve(process.cwd(),"dist");d(`Serving static files from: ${s}`);try{let t=await _.readdir(s);d(`Files in dist directory: ${t.join(", ")}`),m.use(l.static(s,{index:"index.html",maxAge:"1y",etag:!0,lastModified:!0,setHeaders:(r,e)=>{e.endsWith(".html")&&(r.setHeader("Cache-Control","no-cache, no-store, must-revalidate"),r.setHeader("Pragma","no-cache"),r.setHeader("Expires","0"))}})),m.get("*",(r,e)=>{d(`Serving index.html for route: ${r.path}`),e.sendFile(g.join(s,"index.html"),o=>{o&&(d(`Error serving index.html: ${o.message}`,"error"),e.status(500).send("Error loading the application"))})})}catch(t){let r=t instanceof Error?t.message:"Unknown error";d(`Error setting up static file serving: ${r}`,"error"),process.exit(1)}}let a=3e3;n.listen(a,"127.0.0.1",()=>{d(`Server running at http://127.0.0.1:${a}`)})})();
//# sourceMappingURL=index.js.map
